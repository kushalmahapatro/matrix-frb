// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.11.1.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../frb_generated.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';
import 'timelines.dart';

// These functions are ignored because they are not marked as `pub`: `get_room_update_data`
// These types are ignored because they are neither used by any `pub` functions nor (for structs and enums) marked `#[frb(unignore)]`: `ExtraRoomInfo`, `RoomList`
// These function are ignored because they are on traits that is not defined in current crate (put an empty `#[frb]` on it to unignore): `clone`, `clone`
// These functions are ignored (category: IgnoreBecauseOwnerTyShouldIgnore): `get_room_by_id`, `new`

Future<List<RoomUpdate>> getAllRooms() =>
    RustLib.instance.api.crateMatrixRoomsGetAllRooms();

Stream<RoomUpdate> subscribeToAllRoomUpdates() =>
    RustLib.instance.api.crateMatrixRoomsSubscribeToAllRoomUpdates();

Future<String> sendMessage({required String roomId, required String content}) =>
    RustLib.instance.api.crateMatrixRoomsSendMessage(
      roomId: roomId,
      content: content,
    );

class RoomUpdate {
  final String roomId;
  final String? rawName;
  final String? displayName;
  final bool? isDm;
  final UpdateType updateType;
  final BigInt? unreadNotifications;
  final BigInt? unreadHighlight;
  final BigInt? unreadMentions;
  final BigInt? unreadMessages;
  final Message? message;

  const RoomUpdate({
    required this.roomId,
    this.rawName,
    this.displayName,
    this.isDm,
    required this.updateType,
    this.unreadNotifications,
    this.unreadHighlight,
    this.unreadMentions,
    this.unreadMessages,
    this.message,
  });

  @override
  int get hashCode =>
      roomId.hashCode ^
      rawName.hashCode ^
      displayName.hashCode ^
      isDm.hashCode ^
      updateType.hashCode ^
      unreadNotifications.hashCode ^
      unreadHighlight.hashCode ^
      unreadMentions.hashCode ^
      unreadMessages.hashCode ^
      message.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is RoomUpdate &&
          runtimeType == other.runtimeType &&
          roomId == other.roomId &&
          rawName == other.rawName &&
          displayName == other.displayName &&
          isDm == other.isDm &&
          updateType == other.updateType &&
          unreadNotifications == other.unreadNotifications &&
          unreadHighlight == other.unreadHighlight &&
          unreadMentions == other.unreadMentions &&
          unreadMessages == other.unreadMessages &&
          message == other.message;
}

enum UpdateType { joined, left, invited, knocked }
