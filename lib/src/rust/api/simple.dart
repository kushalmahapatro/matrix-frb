// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.11.1.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../frb_generated.dart';
import 'matrix_client.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

// These functions are ignored because they are not marked as `pub`: `init_rust_logging`

Future<String> greet({required String name}) =>
    RustLib.instance.api.crateApiSimpleGreet(name: name);

/// Bridge function to log messages from Rust to Flutter
Future<void> logMessage({required String level, required String message}) =>
    RustLib.instance.api.crateApiSimpleLogMessage(
      level: level,
      message: message,
    );

Future<String> checkMatrixSdkStatus() =>
    RustLib.instance.api.crateApiSimpleCheckMatrixSdkStatus();

Future<String> getMatrixConfig() =>
    RustLib.instance.api.crateApiSimpleGetMatrixConfig();

Future<String> getSyncOperationsStatus() =>
    RustLib.instance.api.crateApiSimpleGetSyncOperationsStatus();

Future<String> testServerConnectivity() =>
    RustLib.instance.api.crateApiSimpleTestServerConnectivity();

Future<bool> matrixInitClient({required MatrixClientConfig config}) =>
    RustLib.instance.api.crateApiSimpleMatrixInitClient(config: config);

Future<bool> matrixLogin({
  required String username,
  required String password,
}) => RustLib.instance.api.crateApiSimpleMatrixLogin(
  username: username,
  password: password,
);

Future<bool> matrixLogout() =>
    RustLib.instance.api.crateApiSimpleMatrixLogout();

Future<bool> matrixIsLoggedIn() =>
    RustLib.instance.api.crateApiSimpleMatrixIsLoggedIn();

Future<bool> matrixPerformInitialSync() =>
    RustLib.instance.api.crateApiSimpleMatrixPerformInitialSync();

Future<SyncStatus> matrixGetSyncStatus() =>
    RustLib.instance.api.crateApiSimpleMatrixGetSyncStatus();

Future<List<MatrixRoomInfo>> matrixGetRooms() =>
    RustLib.instance.api.crateApiSimpleMatrixGetRooms();

Future<String> matrixCreateRoom({required String name, String? topic}) =>
    RustLib.instance.api.crateApiSimpleMatrixCreateRoom(
      name: name,
      topic: topic,
    );

Future<bool> matrixJoinRoom({required String roomId}) =>
    RustLib.instance.api.crateApiSimpleMatrixJoinRoom(roomId: roomId);

Future<String> matrixSendMessage({
  required String roomId,
  required String content,
}) => RustLib.instance.api.crateApiSimpleMatrixSendMessage(
  roomId: roomId,
  content: content,
);

Future<List<MatrixMessage>> matrixGetMessages({
  required String roomId,
  required int limit,
}) => RustLib.instance.api.crateApiSimpleMatrixGetMessages(
  roomId: roomId,
  limit: limit,
);
