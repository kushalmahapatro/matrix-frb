// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.11.1.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../frb_generated.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

// These functions are ignored because they are not marked as `pub`: `as_str`, `get_or_init_metadata`, `span_or_event_enabled`, `to_tracing_level`
// These types are ignored because they are neither used by any `pub` functions nor (for structs and enums) marked `#[frb(unignore)]`: `LateInitCallsite`, `MetadataId`
// These function are ignored because they are on traits that is not defined in current crate (put an empty `#[frb]` on it to unignore): `assert_receiver_is_total_eq`, `assert_receiver_is_total_eq`, `clone`, `cmp`, `cmp`, `eq`, `eq`, `metadata`, `partial_cmp`, `partial_cmp`, `set_interest`

/// Log an event.
///
/// The target should be something like a module path, and can be referenced in
/// the filter string given to `init_platform`. `level` and `target` for a
/// callsite are fixed at the first `log_event` call for that callsite and can
/// not be changed afterwards, i.e. the level and target passed for second and
/// following `log_event`s with the same callsite will be ignored.
///
/// This function leaks a little bit of memory for each unique (file + line +
/// level + target) it is called with. Please make sure that the number of
/// different combinations of those parameters this can be called with is
/// constant in the final executable.
Future<void> logEvent({
  required String file,
  int? line,
  required LogLevel level,
  required String target,
  required String message,
}) => RustLib.instance.api.crateApiTracingLogEvent(
  file: file,
  line: line,
  level: level,
  target: target,
  message: message,
);

enum LogLevel { error, warn, info, debug, trace }
