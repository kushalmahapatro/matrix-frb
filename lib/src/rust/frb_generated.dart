// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.11.1.

// ignore_for_file: unused_import, unused_element, unnecessary_import, duplicate_ignore, invalid_use_of_internal_member, annotate_overrides, non_constant_identifier_names, curly_braces_in_flow_control_structures, prefer_const_literals_to_create_immutables, unused_field

import 'api/matrix_client.dart';
import 'api/matrix_message.dart';
import 'api/matrix_room.dart';
import 'api/simple.dart';
import 'dart:async';
import 'dart:convert';
import 'frb_generated.dart';
import 'frb_generated.io.dart'
    if (dart.library.js_interop) 'frb_generated.web.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

/// Main entrypoint of the Rust API
class RustLib extends BaseEntrypoint<RustLibApi, RustLibApiImpl, RustLibWire> {
  @internal
  static final instance = RustLib._();

  RustLib._();

  /// Initialize flutter_rust_bridge
  static Future<void> init({
    RustLibApi? api,
    BaseHandler? handler,
    ExternalLibrary? externalLibrary,
    bool forceSameCodegenVersion = true,
  }) async {
    await instance.initImpl(
      api: api,
      handler: handler,
      externalLibrary: externalLibrary,
      forceSameCodegenVersion: forceSameCodegenVersion,
    );
  }

  /// Initialize flutter_rust_bridge in mock mode.
  /// No libraries for FFI are loaded.
  static void initMock({required RustLibApi api}) {
    instance.initMockImpl(api: api);
  }

  /// Dispose flutter_rust_bridge
  ///
  /// The call to this function is optional, since flutter_rust_bridge (and everything else)
  /// is automatically disposed when the app stops.
  static void dispose() => instance.disposeImpl();

  @override
  ApiImplConstructor<RustLibApiImpl, RustLibWire> get apiImplConstructor =>
      RustLibApiImpl.new;

  @override
  WireConstructor<RustLibWire> get wireConstructor =>
      RustLibWire.fromExternalLibrary;

  @override
  Future<void> executeRustInitializers() async {
    await api.crateApiSimpleInitApp();
  }

  @override
  ExternalLibraryLoaderConfig get defaultExternalLibraryLoaderConfig =>
      kDefaultExternalLibraryLoaderConfig;

  @override
  String get codegenVersion => '2.11.1';

  @override
  int get rustContentHash => -654337888;

  static const kDefaultExternalLibraryLoaderConfig =
      ExternalLibraryLoaderConfig(
        stem: 'rust_lib_matrix',
        ioDirectory: 'rust/target/release/',
        webPrefix: 'pkg/',
      );
}

abstract class RustLibApi extends BaseApi {
  Future<String> crateApiSimpleCheckMatrixSdkStatus();

  Future<String> crateApiMatrixClientCreateRoom({
    required String name,
    String? topic,
  });

  Future<String> crateApiSimpleGetMatrixConfig();

  Future<List<MatrixMessage>> crateApiMatrixClientGetMessages({
    required String roomId,
    required int limit,
  });

  Future<List<String>> crateApiMatrixRoomGetRoomMembers({
    required String roomId,
  });

  Future<List<MatrixRoomInfo>> crateApiMatrixClientGetRooms();

  Future<String> crateApiSimpleGetSyncOperationsStatus();

  Future<SyncStatus> crateApiMatrixClientGetSyncStatus();

  Future<String> crateApiSimpleGreet({required String name});

  Future<void> crateApiSimpleInitApp();

  Future<bool> crateApiMatrixClientInitClient({
    required MatrixClientConfig config,
  });

  Future<bool> crateApiMatrixRoomInviteUser({
    required String roomId,
    required String userId,
  });

  Future<bool> crateApiMatrixClientIsLoggedIn();

  Future<bool> crateApiMatrixClientJoinRoom({required String roomId});

  Future<bool> crateApiMatrixRoomJoinRoom({required String roomId});

  Future<bool> crateApiMatrixRoomLeaveRoom({required String roomId});

  Future<void> crateApiSimpleLogMessage({
    required String level,
    required String message,
  });

  Future<bool> crateApiMatrixClientLogin({
    required String username,
    required String password,
  });

  Future<bool> crateApiMatrixClientLogout();

  Future<String> crateApiSimpleMatrixCreateRoom({
    required String name,
    String? topic,
  });

  Future<List<MatrixMessage>> crateApiSimpleMatrixGetMessages({
    required String roomId,
    required int limit,
  });

  Future<List<MatrixRoomInfo>> crateApiSimpleMatrixGetRooms();

  Future<SyncStatus> crateApiSimpleMatrixGetSyncStatus();

  Future<bool> crateApiSimpleMatrixInitClient({
    required MatrixClientConfig config,
  });

  Future<bool> crateApiSimpleMatrixIsLoggedIn();

  Future<bool> crateApiSimpleMatrixJoinRoom({required String roomId});

  Future<bool> crateApiSimpleMatrixLogin({
    required String username,
    required String password,
  });

  Future<bool> crateApiSimpleMatrixLogout();

  Future<bool> crateApiSimpleMatrixPerformInitialSync();

  Future<String> crateApiSimpleMatrixSendMessage({
    required String roomId,
    required String content,
  });

  Future<bool> crateApiMatrixClientPerformInitialSync();

  Future<bool> crateApiMatrixMessageRedactMessage({
    required String roomId,
    required String eventId,
    String? reason,
  });

  Future<String> crateApiMatrixMessageSendFormattedMessage({
    required String roomId,
    required String content,
    required String formattedContent,
  });

  Future<String> crateApiMatrixClientSendMessage({
    required String roomId,
    required String content,
  });

  Future<String> crateApiMatrixMessageSendReaction({
    required String roomId,
    required String eventId,
    required String reaction,
  });

  Future<String> crateApiMatrixMessageSendTextMessage({
    required String roomId,
    required String content,
  });

  Future<String> crateApiSimpleTestServerConnectivity();
}

class RustLibApiImpl extends RustLibApiImplPlatform implements RustLibApi {
  RustLibApiImpl({
    required super.handler,
    required super.wire,
    required super.generalizedFrbRustBinding,
    required super.portManager,
  });

  @override
  Future<String> crateApiSimpleCheckMatrixSdkStatus() {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 1,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_String,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiSimpleCheckMatrixSdkStatusConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiSimpleCheckMatrixSdkStatusConstMeta =>
      const TaskConstMeta(debugName: "check_matrix_sdk_status", argNames: []);

  @override
  Future<String> crateApiMatrixClientCreateRoom({
    required String name,
    String? topic,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(name, serializer);
          sse_encode_opt_String(topic, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 2,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_String,
          decodeErrorData: sse_decode_String,
        ),
        constMeta: kCrateApiMatrixClientCreateRoomConstMeta,
        argValues: [name, topic],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiMatrixClientCreateRoomConstMeta =>
      const TaskConstMeta(
        debugName: "create_room",
        argNames: ["name", "topic"],
      );

  @override
  Future<String> crateApiSimpleGetMatrixConfig() {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 3,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_String,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiSimpleGetMatrixConfigConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiSimpleGetMatrixConfigConstMeta =>
      const TaskConstMeta(debugName: "get_matrix_config", argNames: []);

  @override
  Future<List<MatrixMessage>> crateApiMatrixClientGetMessages({
    required String roomId,
    required int limit,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(roomId, serializer);
          sse_encode_u_32(limit, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 4,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_list_matrix_message,
          decodeErrorData: sse_decode_String,
        ),
        constMeta: kCrateApiMatrixClientGetMessagesConstMeta,
        argValues: [roomId, limit],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiMatrixClientGetMessagesConstMeta =>
      const TaskConstMeta(
        debugName: "get_messages",
        argNames: ["roomId", "limit"],
      );

  @override
  Future<List<String>> crateApiMatrixRoomGetRoomMembers({
    required String roomId,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(roomId, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 5,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_list_String,
          decodeErrorData: sse_decode_String,
        ),
        constMeta: kCrateApiMatrixRoomGetRoomMembersConstMeta,
        argValues: [roomId],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiMatrixRoomGetRoomMembersConstMeta =>
      const TaskConstMeta(debugName: "get_room_members", argNames: ["roomId"]);

  @override
  Future<List<MatrixRoomInfo>> crateApiMatrixClientGetRooms() {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 6,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_list_matrix_room_info,
          decodeErrorData: sse_decode_String,
        ),
        constMeta: kCrateApiMatrixClientGetRoomsConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiMatrixClientGetRoomsConstMeta =>
      const TaskConstMeta(debugName: "get_rooms", argNames: []);

  @override
  Future<String> crateApiSimpleGetSyncOperationsStatus() {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 7,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_String,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiSimpleGetSyncOperationsStatusConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiSimpleGetSyncOperationsStatusConstMeta =>
      const TaskConstMeta(
        debugName: "get_sync_operations_status",
        argNames: [],
      );

  @override
  Future<SyncStatus> crateApiMatrixClientGetSyncStatus() {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 8,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_sync_status,
          decodeErrorData: sse_decode_String,
        ),
        constMeta: kCrateApiMatrixClientGetSyncStatusConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiMatrixClientGetSyncStatusConstMeta =>
      const TaskConstMeta(debugName: "get_sync_status", argNames: []);

  @override
  Future<String> crateApiSimpleGreet({required String name}) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(name, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 9,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_String,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiSimpleGreetConstMeta,
        argValues: [name],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiSimpleGreetConstMeta =>
      const TaskConstMeta(debugName: "greet", argNames: ["name"]);

  @override
  Future<void> crateApiSimpleInitApp() {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 10,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiSimpleInitAppConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiSimpleInitAppConstMeta =>
      const TaskConstMeta(debugName: "init_app", argNames: []);

  @override
  Future<bool> crateApiMatrixClientInitClient({
    required MatrixClientConfig config,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_box_autoadd_matrix_client_config(config, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 11,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_bool,
          decodeErrorData: sse_decode_String,
        ),
        constMeta: kCrateApiMatrixClientInitClientConstMeta,
        argValues: [config],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiMatrixClientInitClientConstMeta =>
      const TaskConstMeta(debugName: "init_client", argNames: ["config"]);

  @override
  Future<bool> crateApiMatrixRoomInviteUser({
    required String roomId,
    required String userId,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(roomId, serializer);
          sse_encode_String(userId, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 12,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_bool,
          decodeErrorData: sse_decode_String,
        ),
        constMeta: kCrateApiMatrixRoomInviteUserConstMeta,
        argValues: [roomId, userId],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiMatrixRoomInviteUserConstMeta =>
      const TaskConstMeta(
        debugName: "invite_user",
        argNames: ["roomId", "userId"],
      );

  @override
  Future<bool> crateApiMatrixClientIsLoggedIn() {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 13,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_bool,
          decodeErrorData: sse_decode_String,
        ),
        constMeta: kCrateApiMatrixClientIsLoggedInConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiMatrixClientIsLoggedInConstMeta =>
      const TaskConstMeta(debugName: "is_logged_in", argNames: []);

  @override
  Future<bool> crateApiMatrixClientJoinRoom({required String roomId}) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(roomId, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 14,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_bool,
          decodeErrorData: sse_decode_String,
        ),
        constMeta: kCrateApiMatrixClientJoinRoomConstMeta,
        argValues: [roomId],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiMatrixClientJoinRoomConstMeta =>
      const TaskConstMeta(debugName: "join_room", argNames: ["roomId"]);

  @override
  Future<bool> crateApiMatrixRoomJoinRoom({required String roomId}) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(roomId, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 15,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_bool,
          decodeErrorData: sse_decode_String,
        ),
        constMeta: kCrateApiMatrixRoomJoinRoomConstMeta,
        argValues: [roomId],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiMatrixRoomJoinRoomConstMeta =>
      const TaskConstMeta(debugName: "join_room", argNames: ["roomId"]);

  @override
  Future<bool> crateApiMatrixRoomLeaveRoom({required String roomId}) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(roomId, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 16,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_bool,
          decodeErrorData: sse_decode_String,
        ),
        constMeta: kCrateApiMatrixRoomLeaveRoomConstMeta,
        argValues: [roomId],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiMatrixRoomLeaveRoomConstMeta =>
      const TaskConstMeta(debugName: "leave_room", argNames: ["roomId"]);

  @override
  Future<void> crateApiSimpleLogMessage({
    required String level,
    required String message,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(level, serializer);
          sse_encode_String(message, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 17,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiSimpleLogMessageConstMeta,
        argValues: [level, message],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiSimpleLogMessageConstMeta => const TaskConstMeta(
    debugName: "log_message",
    argNames: ["level", "message"],
  );

  @override
  Future<bool> crateApiMatrixClientLogin({
    required String username,
    required String password,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(username, serializer);
          sse_encode_String(password, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 18,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_bool,
          decodeErrorData: sse_decode_String,
        ),
        constMeta: kCrateApiMatrixClientLoginConstMeta,
        argValues: [username, password],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiMatrixClientLoginConstMeta => const TaskConstMeta(
    debugName: "login",
    argNames: ["username", "password"],
  );

  @override
  Future<bool> crateApiMatrixClientLogout() {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 19,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_bool,
          decodeErrorData: sse_decode_String,
        ),
        constMeta: kCrateApiMatrixClientLogoutConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiMatrixClientLogoutConstMeta =>
      const TaskConstMeta(debugName: "logout", argNames: []);

  @override
  Future<String> crateApiSimpleMatrixCreateRoom({
    required String name,
    String? topic,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(name, serializer);
          sse_encode_opt_String(topic, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 20,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_String,
          decodeErrorData: sse_decode_String,
        ),
        constMeta: kCrateApiSimpleMatrixCreateRoomConstMeta,
        argValues: [name, topic],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiSimpleMatrixCreateRoomConstMeta =>
      const TaskConstMeta(
        debugName: "matrix_create_room",
        argNames: ["name", "topic"],
      );

  @override
  Future<List<MatrixMessage>> crateApiSimpleMatrixGetMessages({
    required String roomId,
    required int limit,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(roomId, serializer);
          sse_encode_u_32(limit, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 21,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_list_matrix_message,
          decodeErrorData: sse_decode_String,
        ),
        constMeta: kCrateApiSimpleMatrixGetMessagesConstMeta,
        argValues: [roomId, limit],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiSimpleMatrixGetMessagesConstMeta =>
      const TaskConstMeta(
        debugName: "matrix_get_messages",
        argNames: ["roomId", "limit"],
      );

  @override
  Future<List<MatrixRoomInfo>> crateApiSimpleMatrixGetRooms() {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 22,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_list_matrix_room_info,
          decodeErrorData: sse_decode_String,
        ),
        constMeta: kCrateApiSimpleMatrixGetRoomsConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiSimpleMatrixGetRoomsConstMeta =>
      const TaskConstMeta(debugName: "matrix_get_rooms", argNames: []);

  @override
  Future<SyncStatus> crateApiSimpleMatrixGetSyncStatus() {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 23,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_sync_status,
          decodeErrorData: sse_decode_String,
        ),
        constMeta: kCrateApiSimpleMatrixGetSyncStatusConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiSimpleMatrixGetSyncStatusConstMeta =>
      const TaskConstMeta(debugName: "matrix_get_sync_status", argNames: []);

  @override
  Future<bool> crateApiSimpleMatrixInitClient({
    required MatrixClientConfig config,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_box_autoadd_matrix_client_config(config, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 24,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_bool,
          decodeErrorData: sse_decode_String,
        ),
        constMeta: kCrateApiSimpleMatrixInitClientConstMeta,
        argValues: [config],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiSimpleMatrixInitClientConstMeta =>
      const TaskConstMeta(
        debugName: "matrix_init_client",
        argNames: ["config"],
      );

  @override
  Future<bool> crateApiSimpleMatrixIsLoggedIn() {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 25,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_bool,
          decodeErrorData: sse_decode_String,
        ),
        constMeta: kCrateApiSimpleMatrixIsLoggedInConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiSimpleMatrixIsLoggedInConstMeta =>
      const TaskConstMeta(debugName: "matrix_is_logged_in", argNames: []);

  @override
  Future<bool> crateApiSimpleMatrixJoinRoom({required String roomId}) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(roomId, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 26,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_bool,
          decodeErrorData: sse_decode_String,
        ),
        constMeta: kCrateApiSimpleMatrixJoinRoomConstMeta,
        argValues: [roomId],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiSimpleMatrixJoinRoomConstMeta =>
      const TaskConstMeta(debugName: "matrix_join_room", argNames: ["roomId"]);

  @override
  Future<bool> crateApiSimpleMatrixLogin({
    required String username,
    required String password,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(username, serializer);
          sse_encode_String(password, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 27,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_bool,
          decodeErrorData: sse_decode_String,
        ),
        constMeta: kCrateApiSimpleMatrixLoginConstMeta,
        argValues: [username, password],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiSimpleMatrixLoginConstMeta => const TaskConstMeta(
    debugName: "matrix_login",
    argNames: ["username", "password"],
  );

  @override
  Future<bool> crateApiSimpleMatrixLogout() {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 28,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_bool,
          decodeErrorData: sse_decode_String,
        ),
        constMeta: kCrateApiSimpleMatrixLogoutConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiSimpleMatrixLogoutConstMeta =>
      const TaskConstMeta(debugName: "matrix_logout", argNames: []);

  @override
  Future<bool> crateApiSimpleMatrixPerformInitialSync() {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 29,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_bool,
          decodeErrorData: sse_decode_String,
        ),
        constMeta: kCrateApiSimpleMatrixPerformInitialSyncConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiSimpleMatrixPerformInitialSyncConstMeta =>
      const TaskConstMeta(
        debugName: "matrix_perform_initial_sync",
        argNames: [],
      );

  @override
  Future<String> crateApiSimpleMatrixSendMessage({
    required String roomId,
    required String content,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(roomId, serializer);
          sse_encode_String(content, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 30,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_String,
          decodeErrorData: sse_decode_String,
        ),
        constMeta: kCrateApiSimpleMatrixSendMessageConstMeta,
        argValues: [roomId, content],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiSimpleMatrixSendMessageConstMeta =>
      const TaskConstMeta(
        debugName: "matrix_send_message",
        argNames: ["roomId", "content"],
      );

  @override
  Future<bool> crateApiMatrixClientPerformInitialSync() {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 31,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_bool,
          decodeErrorData: sse_decode_String,
        ),
        constMeta: kCrateApiMatrixClientPerformInitialSyncConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiMatrixClientPerformInitialSyncConstMeta =>
      const TaskConstMeta(debugName: "perform_initial_sync", argNames: []);

  @override
  Future<bool> crateApiMatrixMessageRedactMessage({
    required String roomId,
    required String eventId,
    String? reason,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(roomId, serializer);
          sse_encode_String(eventId, serializer);
          sse_encode_opt_String(reason, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 32,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_bool,
          decodeErrorData: sse_decode_String,
        ),
        constMeta: kCrateApiMatrixMessageRedactMessageConstMeta,
        argValues: [roomId, eventId, reason],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiMatrixMessageRedactMessageConstMeta =>
      const TaskConstMeta(
        debugName: "redact_message",
        argNames: ["roomId", "eventId", "reason"],
      );

  @override
  Future<String> crateApiMatrixMessageSendFormattedMessage({
    required String roomId,
    required String content,
    required String formattedContent,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(roomId, serializer);
          sse_encode_String(content, serializer);
          sse_encode_String(formattedContent, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 33,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_String,
          decodeErrorData: sse_decode_String,
        ),
        constMeta: kCrateApiMatrixMessageSendFormattedMessageConstMeta,
        argValues: [roomId, content, formattedContent],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiMatrixMessageSendFormattedMessageConstMeta =>
      const TaskConstMeta(
        debugName: "send_formatted_message",
        argNames: ["roomId", "content", "formattedContent"],
      );

  @override
  Future<String> crateApiMatrixClientSendMessage({
    required String roomId,
    required String content,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(roomId, serializer);
          sse_encode_String(content, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 34,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_String,
          decodeErrorData: sse_decode_String,
        ),
        constMeta: kCrateApiMatrixClientSendMessageConstMeta,
        argValues: [roomId, content],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiMatrixClientSendMessageConstMeta =>
      const TaskConstMeta(
        debugName: "send_message",
        argNames: ["roomId", "content"],
      );

  @override
  Future<String> crateApiMatrixMessageSendReaction({
    required String roomId,
    required String eventId,
    required String reaction,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(roomId, serializer);
          sse_encode_String(eventId, serializer);
          sse_encode_String(reaction, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 35,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_String,
          decodeErrorData: sse_decode_String,
        ),
        constMeta: kCrateApiMatrixMessageSendReactionConstMeta,
        argValues: [roomId, eventId, reaction],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiMatrixMessageSendReactionConstMeta =>
      const TaskConstMeta(
        debugName: "send_reaction",
        argNames: ["roomId", "eventId", "reaction"],
      );

  @override
  Future<String> crateApiMatrixMessageSendTextMessage({
    required String roomId,
    required String content,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(roomId, serializer);
          sse_encode_String(content, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 36,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_String,
          decodeErrorData: sse_decode_String,
        ),
        constMeta: kCrateApiMatrixMessageSendTextMessageConstMeta,
        argValues: [roomId, content],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiMatrixMessageSendTextMessageConstMeta =>
      const TaskConstMeta(
        debugName: "send_text_message",
        argNames: ["roomId", "content"],
      );

  @override
  Future<String> crateApiSimpleTestServerConnectivity() {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 37,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_String,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiSimpleTestServerConnectivityConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiSimpleTestServerConnectivityConstMeta =>
      const TaskConstMeta(debugName: "test_server_connectivity", argNames: []);

  @protected
  String dco_decode_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as String;
  }

  @protected
  bool dco_decode_bool(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as bool;
  }

  @protected
  MatrixClientConfig dco_decode_box_autoadd_matrix_client_config(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_matrix_client_config(raw);
  }

  @protected
  BigInt dco_decode_box_autoadd_u_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_u_64(raw);
  }

  @protected
  List<String> dco_decode_list_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_String).toList();
  }

  @protected
  List<MatrixMessage> dco_decode_list_matrix_message(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_matrix_message).toList();
  }

  @protected
  List<MatrixRoomInfo> dco_decode_list_matrix_room_info(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_matrix_room_info).toList();
  }

  @protected
  Uint8List dco_decode_list_prim_u_8_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as Uint8List;
  }

  @protected
  MatrixClientConfig dco_decode_matrix_client_config(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return MatrixClientConfig(
      homeserverUrl: dco_decode_String(arr[0]),
      storagePath: dco_decode_String(arr[1]),
    );
  }

  @protected
  MatrixMessage dco_decode_matrix_message(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 4)
      throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return MatrixMessage(
      eventId: dco_decode_String(arr[0]),
      sender: dco_decode_String(arr[1]),
      content: dco_decode_String(arr[2]),
      timestamp: dco_decode_u_64(arr[3]),
    );
  }

  @protected
  MatrixRoomInfo dco_decode_matrix_room_info(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 5)
      throw Exception('unexpected arr length: expect 5 but see ${arr.length}');
    return MatrixRoomInfo(
      roomId: dco_decode_String(arr[0]),
      name: dco_decode_opt_String(arr[1]),
      topic: dco_decode_opt_String(arr[2]),
      memberCount: dco_decode_u_64(arr[3]),
      isEncrypted: dco_decode_bool(arr[4]),
    );
  }

  @protected
  String? dco_decode_opt_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_String(raw);
  }

  @protected
  BigInt? dco_decode_opt_box_autoadd_u_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_u_64(raw);
  }

  @protected
  SyncStatus dco_decode_sync_status(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 4)
      throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return SyncStatus(
      isSyncing: dco_decode_bool(arr[0]),
      roomsCount: dco_decode_u_64(arr[1]),
      messagesCount: dco_decode_u_64(arr[2]),
      lastSyncTime: dco_decode_opt_box_autoadd_u_64(arr[3]),
    );
  }

  @protected
  int dco_decode_u_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  BigInt dco_decode_u_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeU64(raw);
  }

  @protected
  int dco_decode_u_8(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  void dco_decode_unit(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return;
  }

  @protected
  String sse_decode_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_prim_u_8_strict(deserializer);
    return utf8.decoder.convert(inner);
  }

  @protected
  bool sse_decode_bool(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8() != 0;
  }

  @protected
  MatrixClientConfig sse_decode_box_autoadd_matrix_client_config(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_matrix_client_config(deserializer));
  }

  @protected
  BigInt sse_decode_box_autoadd_u_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_u_64(deserializer));
  }

  @protected
  List<String> sse_decode_list_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <String>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_String(deserializer));
    }
    return ans_;
  }

  @protected
  List<MatrixMessage> sse_decode_list_matrix_message(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <MatrixMessage>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_matrix_message(deserializer));
    }
    return ans_;
  }

  @protected
  List<MatrixRoomInfo> sse_decode_list_matrix_room_info(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <MatrixRoomInfo>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_matrix_room_info(deserializer));
    }
    return ans_;
  }

  @protected
  Uint8List sse_decode_list_prim_u_8_strict(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint8List(len_);
  }

  @protected
  MatrixClientConfig sse_decode_matrix_client_config(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_homeserverUrl = sse_decode_String(deserializer);
    var var_storagePath = sse_decode_String(deserializer);
    return MatrixClientConfig(
      homeserverUrl: var_homeserverUrl,
      storagePath: var_storagePath,
    );
  }

  @protected
  MatrixMessage sse_decode_matrix_message(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_eventId = sse_decode_String(deserializer);
    var var_sender = sse_decode_String(deserializer);
    var var_content = sse_decode_String(deserializer);
    var var_timestamp = sse_decode_u_64(deserializer);
    return MatrixMessage(
      eventId: var_eventId,
      sender: var_sender,
      content: var_content,
      timestamp: var_timestamp,
    );
  }

  @protected
  MatrixRoomInfo sse_decode_matrix_room_info(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_roomId = sse_decode_String(deserializer);
    var var_name = sse_decode_opt_String(deserializer);
    var var_topic = sse_decode_opt_String(deserializer);
    var var_memberCount = sse_decode_u_64(deserializer);
    var var_isEncrypted = sse_decode_bool(deserializer);
    return MatrixRoomInfo(
      roomId: var_roomId,
      name: var_name,
      topic: var_topic,
      memberCount: var_memberCount,
      isEncrypted: var_isEncrypted,
    );
  }

  @protected
  String? sse_decode_opt_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_String(deserializer));
    } else {
      return null;
    }
  }

  @protected
  BigInt? sse_decode_opt_box_autoadd_u_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_u_64(deserializer));
    } else {
      return null;
    }
  }

  @protected
  SyncStatus sse_decode_sync_status(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_isSyncing = sse_decode_bool(deserializer);
    var var_roomsCount = sse_decode_u_64(deserializer);
    var var_messagesCount = sse_decode_u_64(deserializer);
    var var_lastSyncTime = sse_decode_opt_box_autoadd_u_64(deserializer);
    return SyncStatus(
      isSyncing: var_isSyncing,
      roomsCount: var_roomsCount,
      messagesCount: var_messagesCount,
      lastSyncTime: var_lastSyncTime,
    );
  }

  @protected
  int sse_decode_u_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint32();
  }

  @protected
  BigInt sse_decode_u_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getBigUint64();
  }

  @protected
  int sse_decode_u_8(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8();
  }

  @protected
  void sse_decode_unit(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  int sse_decode_i_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getInt32();
  }

  @protected
  void sse_encode_String(String self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_prim_u_8_strict(utf8.encoder.convert(self), serializer);
  }

  @protected
  void sse_encode_bool(bool self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self ? 1 : 0);
  }

  @protected
  void sse_encode_box_autoadd_matrix_client_config(
    MatrixClientConfig self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_matrix_client_config(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_u_64(BigInt self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_64(self, serializer);
  }

  @protected
  void sse_encode_list_String(List<String> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_String(item, serializer);
    }
  }

  @protected
  void sse_encode_list_matrix_message(
    List<MatrixMessage> self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_matrix_message(item, serializer);
    }
  }

  @protected
  void sse_encode_list_matrix_room_info(
    List<MatrixRoomInfo> self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_matrix_room_info(item, serializer);
    }
  }

  @protected
  void sse_encode_list_prim_u_8_strict(
    Uint8List self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putUint8List(self);
  }

  @protected
  void sse_encode_matrix_client_config(
    MatrixClientConfig self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.homeserverUrl, serializer);
    sse_encode_String(self.storagePath, serializer);
  }

  @protected
  void sse_encode_matrix_message(MatrixMessage self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.eventId, serializer);
    sse_encode_String(self.sender, serializer);
    sse_encode_String(self.content, serializer);
    sse_encode_u_64(self.timestamp, serializer);
  }

  @protected
  void sse_encode_matrix_room_info(
    MatrixRoomInfo self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.roomId, serializer);
    sse_encode_opt_String(self.name, serializer);
    sse_encode_opt_String(self.topic, serializer);
    sse_encode_u_64(self.memberCount, serializer);
    sse_encode_bool(self.isEncrypted, serializer);
  }

  @protected
  void sse_encode_opt_String(String? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_String(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_u_64(BigInt? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_u_64(self, serializer);
    }
  }

  @protected
  void sse_encode_sync_status(SyncStatus self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_bool(self.isSyncing, serializer);
    sse_encode_u_64(self.roomsCount, serializer);
    sse_encode_u_64(self.messagesCount, serializer);
    sse_encode_opt_box_autoadd_u_64(self.lastSyncTime, serializer);
  }

  @protected
  void sse_encode_u_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint32(self);
  }

  @protected
  void sse_encode_u_64(BigInt self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putBigUint64(self);
  }

  @protected
  void sse_encode_u_8(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self);
  }

  @protected
  void sse_encode_unit(void self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  void sse_encode_i_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putInt32(self);
  }
}
