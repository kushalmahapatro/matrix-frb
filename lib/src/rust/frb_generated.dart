// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.11.1.

// ignore_for_file: unused_import, unused_element, unnecessary_import, duplicate_ignore, invalid_use_of_internal_member, annotate_overrides, non_constant_identifier_names, curly_braces_in_flow_control_structures, prefer_const_literals_to_create_immutables, unused_field

import 'api/init.dart';
import 'api/logger.dart';
import 'api/matrix_client.dart';
import 'api/matrix_message.dart';
import 'api/matrix_room.dart';
import 'api/platform.dart';
import 'api/tracing.dart';
import 'dart:async';
import 'dart:convert';
import 'frb_generated.dart';
import 'frb_generated.io.dart'
    if (dart.library.js_interop) 'frb_generated.web.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

/// Main entrypoint of the Rust API
class RustLib extends BaseEntrypoint<RustLibApi, RustLibApiImpl, RustLibWire> {
  @internal
  static final instance = RustLib._();

  RustLib._();

  /// Initialize flutter_rust_bridge
  static Future<void> init({
    RustLibApi? api,
    BaseHandler? handler,
    ExternalLibrary? externalLibrary,
    bool forceSameCodegenVersion = true,
  }) async {
    await instance.initImpl(
      api: api,
      handler: handler,
      externalLibrary: externalLibrary,
      forceSameCodegenVersion: forceSameCodegenVersion,
    );
  }

  /// Initialize flutter_rust_bridge in mock mode.
  /// No libraries for FFI are loaded.
  static void initMock({required RustLibApi api}) {
    instance.initMockImpl(api: api);
  }

  /// Dispose flutter_rust_bridge
  ///
  /// The call to this function is optional, since flutter_rust_bridge (and everything else)
  /// is automatically disposed when the app stops.
  static void dispose() => instance.disposeImpl();

  @override
  ApiImplConstructor<RustLibApiImpl, RustLibWire> get apiImplConstructor =>
      RustLibApiImpl.new;

  @override
  WireConstructor<RustLibWire> get wireConstructor =>
      RustLibWire.fromExternalLibrary;

  @override
  Future<void> executeRustInitializers() async {
    await api.crateApiInitInitApp();
  }

  @override
  ExternalLibraryLoaderConfig get defaultExternalLibraryLoaderConfig =>
      kDefaultExternalLibraryLoaderConfig;

  @override
  String get codegenVersion => '2.11.1';

  @override
  int get rustContentHash => -267991314;

  static const kDefaultExternalLibraryLoaderConfig =
      ExternalLibraryLoaderConfig(
        stem: 'rust_lib_matrix',
        ioDirectory: 'rust/target/release/',
        webPrefix: 'pkg/',
      );
}

abstract class RustLibApi extends BaseApi {
  Future<FieldsFormatterForFiles>
  crateApiPlatformFieldsFormatterForFilesDefault();

  Future<void> crateApiLoggerLog({
    required String level,
    required String message,
    required String tag,
  });

  Future<String> crateApiInitCheckMatrixSdkStatus();

  Stream<LogEntry> crateApiLoggerCreateLogStream();

  Future<String> crateApiMatrixClientCreateRoom({
    required String name,
    String? topic,
  });

  Future<String> crateApiInitGetMatrixConfig();

  Future<List<MatrixMessage>> crateApiMatrixClientGetMessages({
    required String roomId,
    required int limit,
  });

  Future<List<String>> crateApiMatrixRoomGetRoomMembers({
    required String roomId,
  });

  Future<List<MatrixRoomInfo>> crateApiMatrixClientGetRooms();

  Future<String> crateApiInitGetSyncOperationsStatus();

  Future<SyncStatus> crateApiMatrixClientGetSyncStatus();

  Future<void> crateApiInitInitApp();

  Future<bool> crateApiMatrixClientInitClient({
    required MatrixClientConfig config,
  });

  Stream<LogEntry> crateApiLoggerInitLogger();

  Future<void> crateApiPlatformInitPlatform({
    required TracingConfiguration config,
    required bool useLightweightTokioRuntime,
  });

  Stream<SyncEvent> crateApiMatrixClientInitSyncStream();

  Future<bool> crateApiMatrixRoomInviteUser({
    required String roomId,
    required String userId,
  });

  Future<bool> crateApiMatrixClientIsClientAuthenticated();

  Future<bool> crateApiMatrixClientIsLoggedIn();

  Future<bool> crateApiMatrixClientJoinRoom({required String roomId});

  Future<bool> crateApiMatrixRoomJoinRoom({required String roomId});

  Future<bool> crateApiMatrixRoomLeaveRoom({required String roomId});

  Stream<MatrixRoomInfo> crateApiMatrixClientListenRoomUpdates();

  Stream<RoomTimeline> crateApiMatrixClientLoadTimeline({
    required String roomId,
  });

  Future<void> crateApiLoggerLogDebug({required String message});

  Future<void> crateApiLoggerLogError({required String message});

  Future<void> crateApiTracingLogEvent({
    required String file,
    int? line,
    required LogLevel level,
    required String target,
    required String message,
  });

  Future<void> crateApiLoggerLogInfo({required String message});

  Future<void> crateApiLoggerLogWarn({required String message});

  Future<bool> crateApiMatrixClientLogin({
    required String username,
    required String password,
  });

  Future<bool> crateApiMatrixClientLogout();

  Future<bool> crateApiMatrixMessageRedactMessage({
    required String roomId,
    required String eventId,
    String? reason,
  });

  Future<bool> crateApiMatrixClientRegister({
    required String username,
    required String password,
  });

  Future<void> crateApiPlatformReloadTracingFileWriter({
    required TracingFileConfiguration configuration,
  });

  Future<void> crateApiMatrixClientRemoveTimelineStream({
    required String roomId,
  });

  Future<String> crateApiMatrixMessageSendFormattedMessage({
    required String roomId,
    required String content,
    required String formattedContent,
  });

  Future<String> crateApiMatrixClientSendMessage({
    required String roomId,
    required String content,
  });

  Future<String> crateApiMatrixMessageSendReaction({
    required String roomId,
    required String eventId,
    required String reaction,
  });

  Future<String> crateApiMatrixMessageSendTextMessage({
    required String roomId,
    required String content,
  });

  Future<void> crateApiMatrixClientSendToTimelineStream({
    required String roomId,
    required RoomTimeline timelineEvent,
  });

  Stream<RoomTimeline> crateApiMatrixClientSetTimelineStream({
    required String roomId,
  });

  Future<void> crateApiMatrixClientStartSlidingSync();

  Future<void> crateApiMatrixClientSyncOnce();

  Future<String> crateApiInitTestServerConnectivity();

  Future<void> crateApiMatrixClientTimelinePaginateBackwards({
    required String roomId,
  });

  Future<void> crateApiMatrixClientTimelinePaginateForward({
    required String roomId,
  });

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_FieldsFormatterForFiles;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_FieldsFormatterForFiles;

  CrossPlatformFinalizerArg
  get rust_arc_decrement_strong_count_FieldsFormatterForFilesPtr;
}

class RustLibApiImpl extends RustLibApiImplPlatform implements RustLibApi {
  RustLibApiImpl({
    required super.handler,
    required super.wire,
    required super.generalizedFrbRustBinding,
    required super.portManager,
  });

  @override
  Future<FieldsFormatterForFiles>
  crateApiPlatformFieldsFormatterForFilesDefault() {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 1,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFieldsFormatterForFiles,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiPlatformFieldsFormatterForFilesDefaultConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiPlatformFieldsFormatterForFilesDefaultConstMeta =>
      const TaskConstMeta(
        debugName: "FieldsFormatterForFiles_default",
        argNames: [],
      );

  @override
  Future<void> crateApiLoggerLog({
    required String level,
    required String message,
    required String tag,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(level, serializer);
          sse_encode_String(message, serializer);
          sse_encode_String(tag, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 2,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiLoggerLogConstMeta,
        argValues: [level, message, tag],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiLoggerLogConstMeta => const TaskConstMeta(
    debugName: "_log",
    argNames: ["level", "message", "tag"],
  );

  @override
  Future<String> crateApiInitCheckMatrixSdkStatus() {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 3,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_String,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiInitCheckMatrixSdkStatusConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiInitCheckMatrixSdkStatusConstMeta =>
      const TaskConstMeta(debugName: "check_matrix_sdk_status", argNames: []);

  @override
  Stream<LogEntry> crateApiLoggerCreateLogStream() {
    final s = RustStreamSink<LogEntry>();
    unawaited(
      handler.executeNormal(
        NormalTask(
          callFfi: (port_) {
            final serializer = SseSerializer(generalizedFrbRustBinding);
            sse_encode_StreamSink_log_entry_Sse(s, serializer);
            pdeCallFfi(
              generalizedFrbRustBinding,
              serializer,
              funcId: 4,
              port: port_,
            );
          },
          codec: SseCodec(
            decodeSuccessData: sse_decode_unit,
            decodeErrorData: null,
          ),
          constMeta: kCrateApiLoggerCreateLogStreamConstMeta,
          argValues: [s],
          apiImpl: this,
        ),
      ),
    );
    return s.stream;
  }

  TaskConstMeta get kCrateApiLoggerCreateLogStreamConstMeta =>
      const TaskConstMeta(debugName: "create_log_stream", argNames: ["s"]);

  @override
  Future<String> crateApiMatrixClientCreateRoom({
    required String name,
    String? topic,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(name, serializer);
          sse_encode_opt_String(topic, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 5,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_String,
          decodeErrorData: sse_decode_String,
        ),
        constMeta: kCrateApiMatrixClientCreateRoomConstMeta,
        argValues: [name, topic],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiMatrixClientCreateRoomConstMeta =>
      const TaskConstMeta(
        debugName: "create_room",
        argNames: ["name", "topic"],
      );

  @override
  Future<String> crateApiInitGetMatrixConfig() {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 6,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_String,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiInitGetMatrixConfigConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiInitGetMatrixConfigConstMeta =>
      const TaskConstMeta(debugName: "get_matrix_config", argNames: []);

  @override
  Future<List<MatrixMessage>> crateApiMatrixClientGetMessages({
    required String roomId,
    required int limit,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(roomId, serializer);
          sse_encode_u_32(limit, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 7,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_list_matrix_message,
          decodeErrorData: sse_decode_String,
        ),
        constMeta: kCrateApiMatrixClientGetMessagesConstMeta,
        argValues: [roomId, limit],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiMatrixClientGetMessagesConstMeta =>
      const TaskConstMeta(
        debugName: "get_messages",
        argNames: ["roomId", "limit"],
      );

  @override
  Future<List<String>> crateApiMatrixRoomGetRoomMembers({
    required String roomId,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(roomId, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 8,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_list_String,
          decodeErrorData: sse_decode_String,
        ),
        constMeta: kCrateApiMatrixRoomGetRoomMembersConstMeta,
        argValues: [roomId],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiMatrixRoomGetRoomMembersConstMeta =>
      const TaskConstMeta(debugName: "get_room_members", argNames: ["roomId"]);

  @override
  Future<List<MatrixRoomInfo>> crateApiMatrixClientGetRooms() {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 9,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_list_matrix_room_info,
          decodeErrorData: sse_decode_String,
        ),
        constMeta: kCrateApiMatrixClientGetRoomsConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiMatrixClientGetRoomsConstMeta =>
      const TaskConstMeta(debugName: "get_rooms", argNames: []);

  @override
  Future<String> crateApiInitGetSyncOperationsStatus() {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 10,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_String,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiInitGetSyncOperationsStatusConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiInitGetSyncOperationsStatusConstMeta =>
      const TaskConstMeta(
        debugName: "get_sync_operations_status",
        argNames: [],
      );

  @override
  Future<SyncStatus> crateApiMatrixClientGetSyncStatus() {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 11,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_sync_status,
          decodeErrorData: sse_decode_String,
        ),
        constMeta: kCrateApiMatrixClientGetSyncStatusConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiMatrixClientGetSyncStatusConstMeta =>
      const TaskConstMeta(debugName: "get_sync_status", argNames: []);

  @override
  Future<void> crateApiInitInitApp() {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 12,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiInitInitAppConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiInitInitAppConstMeta =>
      const TaskConstMeta(debugName: "init_app", argNames: []);

  @override
  Future<bool> crateApiMatrixClientInitClient({
    required MatrixClientConfig config,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_box_autoadd_matrix_client_config(config, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 13,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_bool,
          decodeErrorData: sse_decode_String,
        ),
        constMeta: kCrateApiMatrixClientInitClientConstMeta,
        argValues: [config],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiMatrixClientInitClientConstMeta =>
      const TaskConstMeta(debugName: "init_client", argNames: ["config"]);

  @override
  Stream<LogEntry> crateApiLoggerInitLogger() {
    final logStream = RustStreamSink<LogEntry>();
    unawaited(
      handler.executeNormal(
        NormalTask(
          callFfi: (port_) {
            final serializer = SseSerializer(generalizedFrbRustBinding);
            sse_encode_StreamSink_log_entry_Sse(logStream, serializer);
            pdeCallFfi(
              generalizedFrbRustBinding,
              serializer,
              funcId: 14,
              port: port_,
            );
          },
          codec: SseCodec(
            decodeSuccessData: sse_decode_unit,
            decodeErrorData: null,
          ),
          constMeta: kCrateApiLoggerInitLoggerConstMeta,
          argValues: [logStream],
          apiImpl: this,
        ),
      ),
    );
    return logStream.stream;
  }

  TaskConstMeta get kCrateApiLoggerInitLoggerConstMeta =>
      const TaskConstMeta(debugName: "init_logger", argNames: ["logStream"]);

  @override
  Future<void> crateApiPlatformInitPlatform({
    required TracingConfiguration config,
    required bool useLightweightTokioRuntime,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_box_autoadd_tracing_configuration(config, serializer);
          sse_encode_bool(useLightweightTokioRuntime, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 15,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: sse_decode_client_error,
        ),
        constMeta: kCrateApiPlatformInitPlatformConstMeta,
        argValues: [config, useLightweightTokioRuntime],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiPlatformInitPlatformConstMeta =>
      const TaskConstMeta(
        debugName: "init_platform",
        argNames: ["config", "useLightweightTokioRuntime"],
      );

  @override
  Stream<SyncEvent> crateApiMatrixClientInitSyncStream() {
    final syncStream = RustStreamSink<SyncEvent>();
    unawaited(
      handler.executeNormal(
        NormalTask(
          callFfi: (port_) {
            final serializer = SseSerializer(generalizedFrbRustBinding);
            sse_encode_StreamSink_sync_event_Sse(syncStream, serializer);
            pdeCallFfi(
              generalizedFrbRustBinding,
              serializer,
              funcId: 16,
              port: port_,
            );
          },
          codec: SseCodec(
            decodeSuccessData: sse_decode_unit,
            decodeErrorData: null,
          ),
          constMeta: kCrateApiMatrixClientInitSyncStreamConstMeta,
          argValues: [syncStream],
          apiImpl: this,
        ),
      ),
    );
    return syncStream.stream;
  }

  TaskConstMeta get kCrateApiMatrixClientInitSyncStreamConstMeta =>
      const TaskConstMeta(
        debugName: "init_sync_stream",
        argNames: ["syncStream"],
      );

  @override
  Future<bool> crateApiMatrixRoomInviteUser({
    required String roomId,
    required String userId,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(roomId, serializer);
          sse_encode_String(userId, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 17,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_bool,
          decodeErrorData: sse_decode_String,
        ),
        constMeta: kCrateApiMatrixRoomInviteUserConstMeta,
        argValues: [roomId, userId],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiMatrixRoomInviteUserConstMeta =>
      const TaskConstMeta(
        debugName: "invite_user",
        argNames: ["roomId", "userId"],
      );

  @override
  Future<bool> crateApiMatrixClientIsClientAuthenticated() {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 18,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_bool,
          decodeErrorData: sse_decode_String,
        ),
        constMeta: kCrateApiMatrixClientIsClientAuthenticatedConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiMatrixClientIsClientAuthenticatedConstMeta =>
      const TaskConstMeta(debugName: "is_client_authenticated", argNames: []);

  @override
  Future<bool> crateApiMatrixClientIsLoggedIn() {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 19,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_bool,
          decodeErrorData: sse_decode_String,
        ),
        constMeta: kCrateApiMatrixClientIsLoggedInConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiMatrixClientIsLoggedInConstMeta =>
      const TaskConstMeta(debugName: "is_logged_in", argNames: []);

  @override
  Future<bool> crateApiMatrixClientJoinRoom({required String roomId}) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(roomId, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 20,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_bool,
          decodeErrorData: sse_decode_String,
        ),
        constMeta: kCrateApiMatrixClientJoinRoomConstMeta,
        argValues: [roomId],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiMatrixClientJoinRoomConstMeta =>
      const TaskConstMeta(debugName: "join_room", argNames: ["roomId"]);

  @override
  Future<bool> crateApiMatrixRoomJoinRoom({required String roomId}) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(roomId, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 21,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_bool,
          decodeErrorData: sse_decode_String,
        ),
        constMeta: kCrateApiMatrixRoomJoinRoomConstMeta,
        argValues: [roomId],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiMatrixRoomJoinRoomConstMeta =>
      const TaskConstMeta(debugName: "join_room", argNames: ["roomId"]);

  @override
  Future<bool> crateApiMatrixRoomLeaveRoom({required String roomId}) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(roomId, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 22,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_bool,
          decodeErrorData: sse_decode_String,
        ),
        constMeta: kCrateApiMatrixRoomLeaveRoomConstMeta,
        argValues: [roomId],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiMatrixRoomLeaveRoomConstMeta =>
      const TaskConstMeta(debugName: "leave_room", argNames: ["roomId"]);

  @override
  Stream<MatrixRoomInfo> crateApiMatrixClientListenRoomUpdates() {
    final stream = RustStreamSink<MatrixRoomInfo>();
    unawaited(
      handler.executeNormal(
        NormalTask(
          callFfi: (port_) {
            final serializer = SseSerializer(generalizedFrbRustBinding);
            sse_encode_StreamSink_matrix_room_info_Sse(stream, serializer);
            pdeCallFfi(
              generalizedFrbRustBinding,
              serializer,
              funcId: 23,
              port: port_,
            );
          },
          codec: SseCodec(
            decodeSuccessData: sse_decode_unit,
            decodeErrorData: null,
          ),
          constMeta: kCrateApiMatrixClientListenRoomUpdatesConstMeta,
          argValues: [stream],
          apiImpl: this,
        ),
      ),
    );
    return stream.stream;
  }

  TaskConstMeta get kCrateApiMatrixClientListenRoomUpdatesConstMeta =>
      const TaskConstMeta(
        debugName: "listen_room_updates",
        argNames: ["stream"],
      );

  @override
  Stream<RoomTimeline> crateApiMatrixClientLoadTimeline({
    required String roomId,
  }) {
    final stream = RustStreamSink<RoomTimeline>();
    unawaited(
      handler.executeNormal(
        NormalTask(
          callFfi: (port_) {
            final serializer = SseSerializer(generalizedFrbRustBinding);
            sse_encode_StreamSink_room_timeline_Sse(stream, serializer);
            sse_encode_String(roomId, serializer);
            pdeCallFfi(
              generalizedFrbRustBinding,
              serializer,
              funcId: 24,
              port: port_,
            );
          },
          codec: SseCodec(
            decodeSuccessData: sse_decode_bool,
            decodeErrorData: sse_decode_String,
          ),
          constMeta: kCrateApiMatrixClientLoadTimelineConstMeta,
          argValues: [stream, roomId],
          apiImpl: this,
        ),
      ),
    );
    return stream.stream;
  }

  TaskConstMeta get kCrateApiMatrixClientLoadTimelineConstMeta =>
      const TaskConstMeta(
        debugName: "load_timeline",
        argNames: ["stream", "roomId"],
      );

  @override
  Future<void> crateApiLoggerLogDebug({required String message}) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(message, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 25,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiLoggerLogDebugConstMeta,
        argValues: [message],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiLoggerLogDebugConstMeta =>
      const TaskConstMeta(debugName: "log_debug", argNames: ["message"]);

  @override
  Future<void> crateApiLoggerLogError({required String message}) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(message, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 26,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiLoggerLogErrorConstMeta,
        argValues: [message],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiLoggerLogErrorConstMeta =>
      const TaskConstMeta(debugName: "log_error", argNames: ["message"]);

  @override
  Future<void> crateApiTracingLogEvent({
    required String file,
    int? line,
    required LogLevel level,
    required String target,
    required String message,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(file, serializer);
          sse_encode_opt_box_autoadd_u_32(line, serializer);
          sse_encode_log_level(level, serializer);
          sse_encode_String(target, serializer);
          sse_encode_String(message, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 27,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiTracingLogEventConstMeta,
        argValues: [file, line, level, target, message],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiTracingLogEventConstMeta => const TaskConstMeta(
    debugName: "log_event",
    argNames: ["file", "line", "level", "target", "message"],
  );

  @override
  Future<void> crateApiLoggerLogInfo({required String message}) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(message, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 28,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiLoggerLogInfoConstMeta,
        argValues: [message],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiLoggerLogInfoConstMeta =>
      const TaskConstMeta(debugName: "log_info", argNames: ["message"]);

  @override
  Future<void> crateApiLoggerLogWarn({required String message}) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(message, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 29,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiLoggerLogWarnConstMeta,
        argValues: [message],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiLoggerLogWarnConstMeta =>
      const TaskConstMeta(debugName: "log_warn", argNames: ["message"]);

  @override
  Future<bool> crateApiMatrixClientLogin({
    required String username,
    required String password,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(username, serializer);
          sse_encode_String(password, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 30,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_bool,
          decodeErrorData: sse_decode_String,
        ),
        constMeta: kCrateApiMatrixClientLoginConstMeta,
        argValues: [username, password],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiMatrixClientLoginConstMeta => const TaskConstMeta(
    debugName: "login",
    argNames: ["username", "password"],
  );

  @override
  Future<bool> crateApiMatrixClientLogout() {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 31,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_bool,
          decodeErrorData: sse_decode_String,
        ),
        constMeta: kCrateApiMatrixClientLogoutConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiMatrixClientLogoutConstMeta =>
      const TaskConstMeta(debugName: "logout", argNames: []);

  @override
  Future<bool> crateApiMatrixMessageRedactMessage({
    required String roomId,
    required String eventId,
    String? reason,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(roomId, serializer);
          sse_encode_String(eventId, serializer);
          sse_encode_opt_String(reason, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 32,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_bool,
          decodeErrorData: sse_decode_String,
        ),
        constMeta: kCrateApiMatrixMessageRedactMessageConstMeta,
        argValues: [roomId, eventId, reason],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiMatrixMessageRedactMessageConstMeta =>
      const TaskConstMeta(
        debugName: "redact_message",
        argNames: ["roomId", "eventId", "reason"],
      );

  @override
  Future<bool> crateApiMatrixClientRegister({
    required String username,
    required String password,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(username, serializer);
          sse_encode_String(password, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 33,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_bool,
          decodeErrorData: sse_decode_String,
        ),
        constMeta: kCrateApiMatrixClientRegisterConstMeta,
        argValues: [username, password],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiMatrixClientRegisterConstMeta =>
      const TaskConstMeta(
        debugName: "register",
        argNames: ["username", "password"],
      );

  @override
  Future<void> crateApiPlatformReloadTracingFileWriter({
    required TracingFileConfiguration configuration,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_box_autoadd_tracing_file_configuration(
            configuration,
            serializer,
          );
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 34,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: sse_decode_client_error,
        ),
        constMeta: kCrateApiPlatformReloadTracingFileWriterConstMeta,
        argValues: [configuration],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiPlatformReloadTracingFileWriterConstMeta =>
      const TaskConstMeta(
        debugName: "reload_tracing_file_writer",
        argNames: ["configuration"],
      );

  @override
  Future<void> crateApiMatrixClientRemoveTimelineStream({
    required String roomId,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(roomId, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 35,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiMatrixClientRemoveTimelineStreamConstMeta,
        argValues: [roomId],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiMatrixClientRemoveTimelineStreamConstMeta =>
      const TaskConstMeta(
        debugName: "remove_timeline_stream",
        argNames: ["roomId"],
      );

  @override
  Future<String> crateApiMatrixMessageSendFormattedMessage({
    required String roomId,
    required String content,
    required String formattedContent,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(roomId, serializer);
          sse_encode_String(content, serializer);
          sse_encode_String(formattedContent, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 36,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_String,
          decodeErrorData: sse_decode_String,
        ),
        constMeta: kCrateApiMatrixMessageSendFormattedMessageConstMeta,
        argValues: [roomId, content, formattedContent],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiMatrixMessageSendFormattedMessageConstMeta =>
      const TaskConstMeta(
        debugName: "send_formatted_message",
        argNames: ["roomId", "content", "formattedContent"],
      );

  @override
  Future<String> crateApiMatrixClientSendMessage({
    required String roomId,
    required String content,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(roomId, serializer);
          sse_encode_String(content, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 37,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_String,
          decodeErrorData: sse_decode_String,
        ),
        constMeta: kCrateApiMatrixClientSendMessageConstMeta,
        argValues: [roomId, content],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiMatrixClientSendMessageConstMeta =>
      const TaskConstMeta(
        debugName: "send_message",
        argNames: ["roomId", "content"],
      );

  @override
  Future<String> crateApiMatrixMessageSendReaction({
    required String roomId,
    required String eventId,
    required String reaction,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(roomId, serializer);
          sse_encode_String(eventId, serializer);
          sse_encode_String(reaction, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 38,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_String,
          decodeErrorData: sse_decode_String,
        ),
        constMeta: kCrateApiMatrixMessageSendReactionConstMeta,
        argValues: [roomId, eventId, reaction],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiMatrixMessageSendReactionConstMeta =>
      const TaskConstMeta(
        debugName: "send_reaction",
        argNames: ["roomId", "eventId", "reaction"],
      );

  @override
  Future<String> crateApiMatrixMessageSendTextMessage({
    required String roomId,
    required String content,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(roomId, serializer);
          sse_encode_String(content, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 39,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_String,
          decodeErrorData: sse_decode_String,
        ),
        constMeta: kCrateApiMatrixMessageSendTextMessageConstMeta,
        argValues: [roomId, content],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiMatrixMessageSendTextMessageConstMeta =>
      const TaskConstMeta(
        debugName: "send_text_message",
        argNames: ["roomId", "content"],
      );

  @override
  Future<void> crateApiMatrixClientSendToTimelineStream({
    required String roomId,
    required RoomTimeline timelineEvent,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(roomId, serializer);
          sse_encode_box_autoadd_room_timeline(timelineEvent, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 40,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: sse_decode_String,
        ),
        constMeta: kCrateApiMatrixClientSendToTimelineStreamConstMeta,
        argValues: [roomId, timelineEvent],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiMatrixClientSendToTimelineStreamConstMeta =>
      const TaskConstMeta(
        debugName: "send_to_timeline_stream",
        argNames: ["roomId", "timelineEvent"],
      );

  @override
  Stream<RoomTimeline> crateApiMatrixClientSetTimelineStream({
    required String roomId,
  }) {
    final stream = RustStreamSink<RoomTimeline>();
    unawaited(
      handler.executeNormal(
        NormalTask(
          callFfi: (port_) {
            final serializer = SseSerializer(generalizedFrbRustBinding);
            sse_encode_String(roomId, serializer);
            sse_encode_StreamSink_room_timeline_Sse(stream, serializer);
            pdeCallFfi(
              generalizedFrbRustBinding,
              serializer,
              funcId: 41,
              port: port_,
            );
          },
          codec: SseCodec(
            decodeSuccessData: sse_decode_unit,
            decodeErrorData: null,
          ),
          constMeta: kCrateApiMatrixClientSetTimelineStreamConstMeta,
          argValues: [roomId, stream],
          apiImpl: this,
        ),
      ),
    );
    return stream.stream;
  }

  TaskConstMeta get kCrateApiMatrixClientSetTimelineStreamConstMeta =>
      const TaskConstMeta(
        debugName: "set_timeline_stream",
        argNames: ["roomId", "stream"],
      );

  @override
  Future<void> crateApiMatrixClientStartSlidingSync() {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 42,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: sse_decode_String,
        ),
        constMeta: kCrateApiMatrixClientStartSlidingSyncConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiMatrixClientStartSlidingSyncConstMeta =>
      const TaskConstMeta(debugName: "start_sliding_sync", argNames: []);

  @override
  Future<void> crateApiMatrixClientSyncOnce() {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 43,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: sse_decode_String,
        ),
        constMeta: kCrateApiMatrixClientSyncOnceConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiMatrixClientSyncOnceConstMeta =>
      const TaskConstMeta(debugName: "sync_once", argNames: []);

  @override
  Future<String> crateApiInitTestServerConnectivity() {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 44,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_String,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiInitTestServerConnectivityConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiInitTestServerConnectivityConstMeta =>
      const TaskConstMeta(debugName: "test_server_connectivity", argNames: []);

  @override
  Future<void> crateApiMatrixClientTimelinePaginateBackwards({
    required String roomId,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(roomId, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 45,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: sse_decode_String,
        ),
        constMeta: kCrateApiMatrixClientTimelinePaginateBackwardsConstMeta,
        argValues: [roomId],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiMatrixClientTimelinePaginateBackwardsConstMeta =>
      const TaskConstMeta(
        debugName: "timeline_paginate_backwards",
        argNames: ["roomId"],
      );

  @override
  Future<void> crateApiMatrixClientTimelinePaginateForward({
    required String roomId,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(roomId, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 46,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: sse_decode_String,
        ),
        constMeta: kCrateApiMatrixClientTimelinePaginateForwardConstMeta,
        argValues: [roomId],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiMatrixClientTimelinePaginateForwardConstMeta =>
      const TaskConstMeta(
        debugName: "timeline_paginate_forward",
        argNames: ["roomId"],
      );

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_FieldsFormatterForFiles =>
      wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFieldsFormatterForFiles;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_FieldsFormatterForFiles =>
      wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFieldsFormatterForFiles;

  @protected
  AnyhowException dco_decode_AnyhowException(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return AnyhowException(raw as String);
  }

  @protected
  FieldsFormatterForFiles
  dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFieldsFormatterForFiles(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return FieldsFormatterForFilesImpl.frbInternalDcoDecode(
      raw as List<dynamic>,
    );
  }

  @protected
  FieldsFormatterForFiles
  dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFieldsFormatterForFiles(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return FieldsFormatterForFilesImpl.frbInternalDcoDecode(
      raw as List<dynamic>,
    );
  }

  @protected
  RustStreamSink<LogEntry> dco_decode_StreamSink_log_entry_Sse(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError();
  }

  @protected
  RustStreamSink<MatrixRoomInfo> dco_decode_StreamSink_matrix_room_info_Sse(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError();
  }

  @protected
  RustStreamSink<RoomTimeline> dco_decode_StreamSink_room_timeline_Sse(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError();
  }

  @protected
  RustStreamSink<SyncEvent> dco_decode_StreamSink_sync_event_Sse(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError();
  }

  @protected
  String dco_decode_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as String;
  }

  @protected
  bool dco_decode_bool(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as bool;
  }

  @protected
  MatrixClientConfig dco_decode_box_autoadd_matrix_client_config(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_matrix_client_config(raw);
  }

  @protected
  MatrixMessage dco_decode_box_autoadd_matrix_message(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_matrix_message(raw);
  }

  @protected
  RoomTimeline dco_decode_box_autoadd_room_timeline(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_room_timeline(raw);
  }

  @protected
  TracingConfiguration dco_decode_box_autoadd_tracing_configuration(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_tracing_configuration(raw);
  }

  @protected
  TracingFileConfiguration dco_decode_box_autoadd_tracing_file_configuration(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_tracing_file_configuration(raw);
  }

  @protected
  int dco_decode_box_autoadd_u_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  BigInt dco_decode_box_autoadd_u_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_u_64(raw);
  }

  @protected
  ClientError dco_decode_client_error(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return ClientError_Generic(
          msg: dco_decode_String(raw[1]),
          details: dco_decode_opt_String(raw[2]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  int dco_decode_i_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  PlatformInt64 dco_decode_i_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeI64(raw);
  }

  @protected
  List<String> dco_decode_list_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_String).toList();
  }

  @protected
  List<MatrixMessage> dco_decode_list_matrix_message(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_matrix_message).toList();
  }

  @protected
  List<MatrixRoomInfo> dco_decode_list_matrix_room_info(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_matrix_room_info).toList();
  }

  @protected
  Uint8List dco_decode_list_prim_u_8_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as Uint8List;
  }

  @protected
  List<TraceLogPacks> dco_decode_list_trace_log_packs(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_trace_log_packs).toList();
  }

  @protected
  LogEntry dco_decode_log_entry(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 4)
      throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return LogEntry(
      level: dco_decode_String(arr[0]),
      message: dco_decode_String(arr[1]),
      timestamp: dco_decode_i_64(arr[2]),
      tag: dco_decode_String(arr[3]),
    );
  }

  @protected
  LogLevel dco_decode_log_level(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return LogLevel.values[raw as int];
  }

  @protected
  MatrixClientConfig dco_decode_matrix_client_config(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return MatrixClientConfig(
      homeserverUrl: dco_decode_String(arr[0]),
      storagePath: dco_decode_String(arr[1]),
    );
  }

  @protected
  MatrixMessage dco_decode_matrix_message(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 4)
      throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return MatrixMessage(
      eventId: dco_decode_String(arr[0]),
      sender: dco_decode_String(arr[1]),
      content: dco_decode_String(arr[2]),
      timestamp: dco_decode_u_64(arr[3]),
    );
  }

  @protected
  MatrixRoomInfo dco_decode_matrix_room_info(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 6)
      throw Exception('unexpected arr length: expect 6 but see ${arr.length}');
    return MatrixRoomInfo(
      roomId: dco_decode_String(arr[0]),
      name: dco_decode_opt_String(arr[1]),
      topic: dco_decode_opt_String(arr[2]),
      memberCount: dco_decode_u_64(arr[3]),
      latestEvent: dco_decode_opt_box_autoadd_matrix_message(arr[4]),
      latestEventTimestamp: dco_decode_opt_box_autoadd_u_64(arr[5]),
    );
  }

  @protected
  String? dco_decode_opt_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_String(raw);
  }

  @protected
  MatrixMessage? dco_decode_opt_box_autoadd_matrix_message(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_matrix_message(raw);
  }

  @protected
  TracingFileConfiguration?
  dco_decode_opt_box_autoadd_tracing_file_configuration(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null
        ? null
        : dco_decode_box_autoadd_tracing_file_configuration(raw);
  }

  @protected
  int? dco_decode_opt_box_autoadd_u_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_u_32(raw);
  }

  @protected
  BigInt? dco_decode_opt_box_autoadd_u_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_u_64(raw);
  }

  @protected
  RoomTimeline dco_decode_room_timeline(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 4)
      throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return RoomTimeline(
      eventId: dco_decode_String(arr[0]),
      sender: dco_decode_String(arr[1]),
      content: dco_decode_String(arr[2]),
      timestamp: dco_decode_u_64(arr[3]),
    );
  }

  @protected
  SyncEvent dco_decode_sync_event(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 7)
      throw Exception('unexpected arr length: expect 7 but see ${arr.length}');
    return SyncEvent(
      eventType: dco_decode_String(arr[0]),
      roomId: dco_decode_opt_String(arr[1]),
      eventId: dco_decode_opt_String(arr[2]),
      sender: dco_decode_opt_String(arr[3]),
      content: dco_decode_opt_String(arr[4]),
      timestamp: dco_decode_opt_box_autoadd_u_64(arr[5]),
      syncTime: dco_decode_u_64(arr[6]),
    );
  }

  @protected
  SyncStatus dco_decode_sync_status(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 4)
      throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return SyncStatus(
      isSyncing: dco_decode_bool(arr[0]),
      roomsCount: dco_decode_u_64(arr[1]),
      messagesCount: dco_decode_u_64(arr[2]),
      lastSyncTime: dco_decode_opt_box_autoadd_u_64(arr[3]),
    );
  }

  @protected
  TraceLogPacks dco_decode_trace_log_packs(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return TraceLogPacks.values[raw as int];
  }

  @protected
  TracingConfiguration dco_decode_tracing_configuration(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 5)
      throw Exception('unexpected arr length: expect 5 but see ${arr.length}');
    return TracingConfiguration(
      logLevel: dco_decode_log_level(arr[0]),
      traceLogPacks: dco_decode_list_trace_log_packs(arr[1]),
      extraTargets: dco_decode_list_String(arr[2]),
      writeToStdoutOrSystem: dco_decode_bool(arr[3]),
      writeToFiles: dco_decode_opt_box_autoadd_tracing_file_configuration(
        arr[4],
      ),
    );
  }

  @protected
  TracingFileConfiguration dco_decode_tracing_file_configuration(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 4)
      throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return TracingFileConfiguration(
      path: dco_decode_String(arr[0]),
      filePrefix: dco_decode_String(arr[1]),
      fileSuffix: dco_decode_opt_String(arr[2]),
      maxFiles: dco_decode_opt_box_autoadd_u_64(arr[3]),
    );
  }

  @protected
  int dco_decode_u_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  BigInt dco_decode_u_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeU64(raw);
  }

  @protected
  int dco_decode_u_8(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  void dco_decode_unit(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return;
  }

  @protected
  BigInt dco_decode_usize(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeU64(raw);
  }

  @protected
  AnyhowException sse_decode_AnyhowException(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_String(deserializer);
    return AnyhowException(inner);
  }

  @protected
  FieldsFormatterForFiles
  sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFieldsFormatterForFiles(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return FieldsFormatterForFilesImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  FieldsFormatterForFiles
  sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFieldsFormatterForFiles(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return FieldsFormatterForFilesImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  RustStreamSink<LogEntry> sse_decode_StreamSink_log_entry_Sse(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    throw UnimplementedError('Unreachable ()');
  }

  @protected
  RustStreamSink<MatrixRoomInfo> sse_decode_StreamSink_matrix_room_info_Sse(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    throw UnimplementedError('Unreachable ()');
  }

  @protected
  RustStreamSink<RoomTimeline> sse_decode_StreamSink_room_timeline_Sse(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    throw UnimplementedError('Unreachable ()');
  }

  @protected
  RustStreamSink<SyncEvent> sse_decode_StreamSink_sync_event_Sse(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    throw UnimplementedError('Unreachable ()');
  }

  @protected
  String sse_decode_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_prim_u_8_strict(deserializer);
    return utf8.decoder.convert(inner);
  }

  @protected
  bool sse_decode_bool(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8() != 0;
  }

  @protected
  MatrixClientConfig sse_decode_box_autoadd_matrix_client_config(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_matrix_client_config(deserializer));
  }

  @protected
  MatrixMessage sse_decode_box_autoadd_matrix_message(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_matrix_message(deserializer));
  }

  @protected
  RoomTimeline sse_decode_box_autoadd_room_timeline(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_room_timeline(deserializer));
  }

  @protected
  TracingConfiguration sse_decode_box_autoadd_tracing_configuration(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_tracing_configuration(deserializer));
  }

  @protected
  TracingFileConfiguration sse_decode_box_autoadd_tracing_file_configuration(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_tracing_file_configuration(deserializer));
  }

  @protected
  int sse_decode_box_autoadd_u_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_u_32(deserializer));
  }

  @protected
  BigInt sse_decode_box_autoadd_u_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_u_64(deserializer));
  }

  @protected
  ClientError sse_decode_client_error(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_msg = sse_decode_String(deserializer);
        var var_details = sse_decode_opt_String(deserializer);
        return ClientError_Generic(msg: var_msg, details: var_details);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  int sse_decode_i_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getInt32();
  }

  @protected
  PlatformInt64 sse_decode_i_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getPlatformInt64();
  }

  @protected
  List<String> sse_decode_list_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <String>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_String(deserializer));
    }
    return ans_;
  }

  @protected
  List<MatrixMessage> sse_decode_list_matrix_message(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <MatrixMessage>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_matrix_message(deserializer));
    }
    return ans_;
  }

  @protected
  List<MatrixRoomInfo> sse_decode_list_matrix_room_info(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <MatrixRoomInfo>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_matrix_room_info(deserializer));
    }
    return ans_;
  }

  @protected
  Uint8List sse_decode_list_prim_u_8_strict(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint8List(len_);
  }

  @protected
  List<TraceLogPacks> sse_decode_list_trace_log_packs(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <TraceLogPacks>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_trace_log_packs(deserializer));
    }
    return ans_;
  }

  @protected
  LogEntry sse_decode_log_entry(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_level = sse_decode_String(deserializer);
    var var_message = sse_decode_String(deserializer);
    var var_timestamp = sse_decode_i_64(deserializer);
    var var_tag = sse_decode_String(deserializer);
    return LogEntry(
      level: var_level,
      message: var_message,
      timestamp: var_timestamp,
      tag: var_tag,
    );
  }

  @protected
  LogLevel sse_decode_log_level(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return LogLevel.values[inner];
  }

  @protected
  MatrixClientConfig sse_decode_matrix_client_config(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_homeserverUrl = sse_decode_String(deserializer);
    var var_storagePath = sse_decode_String(deserializer);
    return MatrixClientConfig(
      homeserverUrl: var_homeserverUrl,
      storagePath: var_storagePath,
    );
  }

  @protected
  MatrixMessage sse_decode_matrix_message(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_eventId = sse_decode_String(deserializer);
    var var_sender = sse_decode_String(deserializer);
    var var_content = sse_decode_String(deserializer);
    var var_timestamp = sse_decode_u_64(deserializer);
    return MatrixMessage(
      eventId: var_eventId,
      sender: var_sender,
      content: var_content,
      timestamp: var_timestamp,
    );
  }

  @protected
  MatrixRoomInfo sse_decode_matrix_room_info(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_roomId = sse_decode_String(deserializer);
    var var_name = sse_decode_opt_String(deserializer);
    var var_topic = sse_decode_opt_String(deserializer);
    var var_memberCount = sse_decode_u_64(deserializer);
    var var_latestEvent = sse_decode_opt_box_autoadd_matrix_message(
      deserializer,
    );
    var var_latestEventTimestamp = sse_decode_opt_box_autoadd_u_64(
      deserializer,
    );
    return MatrixRoomInfo(
      roomId: var_roomId,
      name: var_name,
      topic: var_topic,
      memberCount: var_memberCount,
      latestEvent: var_latestEvent,
      latestEventTimestamp: var_latestEventTimestamp,
    );
  }

  @protected
  String? sse_decode_opt_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_String(deserializer));
    } else {
      return null;
    }
  }

  @protected
  MatrixMessage? sse_decode_opt_box_autoadd_matrix_message(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_matrix_message(deserializer));
    } else {
      return null;
    }
  }

  @protected
  TracingFileConfiguration?
  sse_decode_opt_box_autoadd_tracing_file_configuration(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_tracing_file_configuration(deserializer));
    } else {
      return null;
    }
  }

  @protected
  int? sse_decode_opt_box_autoadd_u_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_u_32(deserializer));
    } else {
      return null;
    }
  }

  @protected
  BigInt? sse_decode_opt_box_autoadd_u_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_u_64(deserializer));
    } else {
      return null;
    }
  }

  @protected
  RoomTimeline sse_decode_room_timeline(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_eventId = sse_decode_String(deserializer);
    var var_sender = sse_decode_String(deserializer);
    var var_content = sse_decode_String(deserializer);
    var var_timestamp = sse_decode_u_64(deserializer);
    return RoomTimeline(
      eventId: var_eventId,
      sender: var_sender,
      content: var_content,
      timestamp: var_timestamp,
    );
  }

  @protected
  SyncEvent sse_decode_sync_event(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_eventType = sse_decode_String(deserializer);
    var var_roomId = sse_decode_opt_String(deserializer);
    var var_eventId = sse_decode_opt_String(deserializer);
    var var_sender = sse_decode_opt_String(deserializer);
    var var_content = sse_decode_opt_String(deserializer);
    var var_timestamp = sse_decode_opt_box_autoadd_u_64(deserializer);
    var var_syncTime = sse_decode_u_64(deserializer);
    return SyncEvent(
      eventType: var_eventType,
      roomId: var_roomId,
      eventId: var_eventId,
      sender: var_sender,
      content: var_content,
      timestamp: var_timestamp,
      syncTime: var_syncTime,
    );
  }

  @protected
  SyncStatus sse_decode_sync_status(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_isSyncing = sse_decode_bool(deserializer);
    var var_roomsCount = sse_decode_u_64(deserializer);
    var var_messagesCount = sse_decode_u_64(deserializer);
    var var_lastSyncTime = sse_decode_opt_box_autoadd_u_64(deserializer);
    return SyncStatus(
      isSyncing: var_isSyncing,
      roomsCount: var_roomsCount,
      messagesCount: var_messagesCount,
      lastSyncTime: var_lastSyncTime,
    );
  }

  @protected
  TraceLogPacks sse_decode_trace_log_packs(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return TraceLogPacks.values[inner];
  }

  @protected
  TracingConfiguration sse_decode_tracing_configuration(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_logLevel = sse_decode_log_level(deserializer);
    var var_traceLogPacks = sse_decode_list_trace_log_packs(deserializer);
    var var_extraTargets = sse_decode_list_String(deserializer);
    var var_writeToStdoutOrSystem = sse_decode_bool(deserializer);
    var var_writeToFiles =
        sse_decode_opt_box_autoadd_tracing_file_configuration(deserializer);
    return TracingConfiguration(
      logLevel: var_logLevel,
      traceLogPacks: var_traceLogPacks,
      extraTargets: var_extraTargets,
      writeToStdoutOrSystem: var_writeToStdoutOrSystem,
      writeToFiles: var_writeToFiles,
    );
  }

  @protected
  TracingFileConfiguration sse_decode_tracing_file_configuration(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_path = sse_decode_String(deserializer);
    var var_filePrefix = sse_decode_String(deserializer);
    var var_fileSuffix = sse_decode_opt_String(deserializer);
    var var_maxFiles = sse_decode_opt_box_autoadd_u_64(deserializer);
    return TracingFileConfiguration(
      path: var_path,
      filePrefix: var_filePrefix,
      fileSuffix: var_fileSuffix,
      maxFiles: var_maxFiles,
    );
  }

  @protected
  int sse_decode_u_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint32();
  }

  @protected
  BigInt sse_decode_u_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getBigUint64();
  }

  @protected
  int sse_decode_u_8(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8();
  }

  @protected
  void sse_decode_unit(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  BigInt sse_decode_usize(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getBigUint64();
  }

  @protected
  void sse_encode_AnyhowException(
    AnyhowException self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.message, serializer);
  }

  @protected
  void
  sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFieldsFormatterForFiles(
    FieldsFormatterForFiles self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as FieldsFormatterForFilesImpl).frbInternalSseEncode(move: true),
      serializer,
    );
  }

  @protected
  void
  sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFieldsFormatterForFiles(
    FieldsFormatterForFiles self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as FieldsFormatterForFilesImpl).frbInternalSseEncode(move: null),
      serializer,
    );
  }

  @protected
  void sse_encode_StreamSink_log_entry_Sse(
    RustStreamSink<LogEntry> self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(
      self.setupAndSerialize(
        codec: SseCodec(
          decodeSuccessData: sse_decode_log_entry,
          decodeErrorData: sse_decode_AnyhowException,
        ),
      ),
      serializer,
    );
  }

  @protected
  void sse_encode_StreamSink_matrix_room_info_Sse(
    RustStreamSink<MatrixRoomInfo> self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(
      self.setupAndSerialize(
        codec: SseCodec(
          decodeSuccessData: sse_decode_matrix_room_info,
          decodeErrorData: sse_decode_AnyhowException,
        ),
      ),
      serializer,
    );
  }

  @protected
  void sse_encode_StreamSink_room_timeline_Sse(
    RustStreamSink<RoomTimeline> self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(
      self.setupAndSerialize(
        codec: SseCodec(
          decodeSuccessData: sse_decode_room_timeline,
          decodeErrorData: sse_decode_AnyhowException,
        ),
      ),
      serializer,
    );
  }

  @protected
  void sse_encode_StreamSink_sync_event_Sse(
    RustStreamSink<SyncEvent> self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(
      self.setupAndSerialize(
        codec: SseCodec(
          decodeSuccessData: sse_decode_sync_event,
          decodeErrorData: sse_decode_AnyhowException,
        ),
      ),
      serializer,
    );
  }

  @protected
  void sse_encode_String(String self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_prim_u_8_strict(utf8.encoder.convert(self), serializer);
  }

  @protected
  void sse_encode_bool(bool self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self ? 1 : 0);
  }

  @protected
  void sse_encode_box_autoadd_matrix_client_config(
    MatrixClientConfig self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_matrix_client_config(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_matrix_message(
    MatrixMessage self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_matrix_message(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_room_timeline(
    RoomTimeline self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_room_timeline(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_tracing_configuration(
    TracingConfiguration self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_tracing_configuration(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_tracing_file_configuration(
    TracingFileConfiguration self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_tracing_file_configuration(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_u_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_32(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_u_64(BigInt self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_64(self, serializer);
  }

  @protected
  void sse_encode_client_error(ClientError self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case ClientError_Generic(msg: final msg, details: final details):
        sse_encode_i_32(0, serializer);
        sse_encode_String(msg, serializer);
        sse_encode_opt_String(details, serializer);
    }
  }

  @protected
  void sse_encode_i_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putInt32(self);
  }

  @protected
  void sse_encode_i_64(PlatformInt64 self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putPlatformInt64(self);
  }

  @protected
  void sse_encode_list_String(List<String> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_String(item, serializer);
    }
  }

  @protected
  void sse_encode_list_matrix_message(
    List<MatrixMessage> self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_matrix_message(item, serializer);
    }
  }

  @protected
  void sse_encode_list_matrix_room_info(
    List<MatrixRoomInfo> self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_matrix_room_info(item, serializer);
    }
  }

  @protected
  void sse_encode_list_prim_u_8_strict(
    Uint8List self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putUint8List(self);
  }

  @protected
  void sse_encode_list_trace_log_packs(
    List<TraceLogPacks> self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_trace_log_packs(item, serializer);
    }
  }

  @protected
  void sse_encode_log_entry(LogEntry self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.level, serializer);
    sse_encode_String(self.message, serializer);
    sse_encode_i_64(self.timestamp, serializer);
    sse_encode_String(self.tag, serializer);
  }

  @protected
  void sse_encode_log_level(LogLevel self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_matrix_client_config(
    MatrixClientConfig self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.homeserverUrl, serializer);
    sse_encode_String(self.storagePath, serializer);
  }

  @protected
  void sse_encode_matrix_message(MatrixMessage self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.eventId, serializer);
    sse_encode_String(self.sender, serializer);
    sse_encode_String(self.content, serializer);
    sse_encode_u_64(self.timestamp, serializer);
  }

  @protected
  void sse_encode_matrix_room_info(
    MatrixRoomInfo self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.roomId, serializer);
    sse_encode_opt_String(self.name, serializer);
    sse_encode_opt_String(self.topic, serializer);
    sse_encode_u_64(self.memberCount, serializer);
    sse_encode_opt_box_autoadd_matrix_message(self.latestEvent, serializer);
    sse_encode_opt_box_autoadd_u_64(self.latestEventTimestamp, serializer);
  }

  @protected
  void sse_encode_opt_String(String? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_String(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_matrix_message(
    MatrixMessage? self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_matrix_message(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_tracing_file_configuration(
    TracingFileConfiguration? self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_tracing_file_configuration(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_u_32(int? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_u_32(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_u_64(BigInt? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_u_64(self, serializer);
    }
  }

  @protected
  void sse_encode_room_timeline(RoomTimeline self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.eventId, serializer);
    sse_encode_String(self.sender, serializer);
    sse_encode_String(self.content, serializer);
    sse_encode_u_64(self.timestamp, serializer);
  }

  @protected
  void sse_encode_sync_event(SyncEvent self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.eventType, serializer);
    sse_encode_opt_String(self.roomId, serializer);
    sse_encode_opt_String(self.eventId, serializer);
    sse_encode_opt_String(self.sender, serializer);
    sse_encode_opt_String(self.content, serializer);
    sse_encode_opt_box_autoadd_u_64(self.timestamp, serializer);
    sse_encode_u_64(self.syncTime, serializer);
  }

  @protected
  void sse_encode_sync_status(SyncStatus self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_bool(self.isSyncing, serializer);
    sse_encode_u_64(self.roomsCount, serializer);
    sse_encode_u_64(self.messagesCount, serializer);
    sse_encode_opt_box_autoadd_u_64(self.lastSyncTime, serializer);
  }

  @protected
  void sse_encode_trace_log_packs(
    TraceLogPacks self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_tracing_configuration(
    TracingConfiguration self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_log_level(self.logLevel, serializer);
    sse_encode_list_trace_log_packs(self.traceLogPacks, serializer);
    sse_encode_list_String(self.extraTargets, serializer);
    sse_encode_bool(self.writeToStdoutOrSystem, serializer);
    sse_encode_opt_box_autoadd_tracing_file_configuration(
      self.writeToFiles,
      serializer,
    );
  }

  @protected
  void sse_encode_tracing_file_configuration(
    TracingFileConfiguration self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.path, serializer);
    sse_encode_String(self.filePrefix, serializer);
    sse_encode_opt_String(self.fileSuffix, serializer);
    sse_encode_opt_box_autoadd_u_64(self.maxFiles, serializer);
  }

  @protected
  void sse_encode_u_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint32(self);
  }

  @protected
  void sse_encode_u_64(BigInt self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putBigUint64(self);
  }

  @protected
  void sse_encode_u_8(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self);
  }

  @protected
  void sse_encode_unit(void self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  void sse_encode_usize(BigInt self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putBigUint64(self);
  }
}

@sealed
class FieldsFormatterForFilesImpl extends RustOpaque
    implements FieldsFormatterForFiles {
  // Not to be used by end users
  FieldsFormatterForFilesImpl.frbInternalDcoDecode(List<dynamic> wire)
    : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  FieldsFormatterForFilesImpl.frbInternalSseDecode(
    BigInt ptr,
    int externalSizeOnNative,
  ) : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib
            .instance
            .api
            .rust_arc_increment_strong_count_FieldsFormatterForFiles,
    rustArcDecrementStrongCount:
        RustLib
            .instance
            .api
            .rust_arc_decrement_strong_count_FieldsFormatterForFiles,
    rustArcDecrementStrongCountPtr:
        RustLib
            .instance
            .api
            .rust_arc_decrement_strong_count_FieldsFormatterForFilesPtr,
  );
}
